'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cli;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _output = require('./utils/output');

var _output2 = _interopRequireDefault(_output);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function checkPathExist(dir) {
  return new Promise(function (resolve, reject) {
    return _fs2.default.exists(dir, function (result) {
      return result ? resolve() : reject();
    });
  });
}

function getParsers(parsers) {
  return typeof parsers === 'undefined' ? undefined : _extends.apply(undefined, [{}].concat(_toConsumableArray(parsers.split(',').map(function (keyValuePair) {
    var _keyValuePair$split = keyValuePair.split(':');

    var _keyValuePair$split2 = _slicedToArray(_keyValuePair$split, 2);

    var glob = _keyValuePair$split2[0];
    var value = _keyValuePair$split2[1];

    return _defineProperty({}, glob, value.split('&').map(function (name) {
      return _index2.default.parser[name];
    }));
  }))));
}

function getDetectors(detectors) {
  return typeof detectors === 'undefined' ? undefined : detectors.split(',').map(function (name) {
    return _index2.default.detector[name];
  });
}

function getSpecials(specials) {
  return typeof specials === 'undefined' ? undefined : specials.split(',').map(function (name) {
    return _index2.default.special[name];
  });
}

function cli(args, log, error, exit) {
  var opt = (0, _yargs2.default)(args).usage('Usage: $0 [DIRECTORY]').boolean(['dev', 'ignore-bin-package']).default({
    'dev': true,
    'ignore-bin-package': false
  }).describe('dev', 'Check on devDependecies').describe('ignore-bin-package', 'Ignore package with bin entry').describe('json', 'Output results to JSON').describe('ignores', 'Comma separated package list to ignore').describe('ignore-dirs', 'Comma separated folder names to ignore').describe('parsers', 'Comma separated glob:pasers pair list').describe('detectors', 'Comma separated detector list').describe('specials', 'Comma separated special parser list').describe('help', 'Show this help message');

  if (opt.argv.help) {
    log(opt.help());
    exit(0);
  } else {
    (function () {
      var dir = opt.argv._[0] || '.';
      var rootDir = _path2.default.resolve(dir);

      checkPathExist(rootDir).catch(function () {
        error('Path ' + dir + ' does not exist');
        exit(-1);
      }).then(function () {
        return checkPathExist(_path2.default.resolve(rootDir, 'package.json'));
      }).catch(function () {
        error('Path ' + dir + ' does not contain a package.json file');
        log(opt.help());
        exit(-1);
      }).then(function () {
        return (0, _index2.default)(rootDir, {
          withoutDev: !opt.argv.dev,
          ignoreBinPackage: opt.argv.ignoreBinPackage,
          ignoreMatches: (opt.argv.ignores || '').split(','),
          ignoreDirs: (opt.argv.ignoreDirs || '').split(','),
          parsers: getParsers(opt.argv.parsers),
          detectors: getDetectors(opt.argv.detectors),
          specials: getSpecials(opt.argv.specials)
        });
      }).then(function (result) {
        return (0, _output2.default)(result, log, opt.argv.json);
      }).then(function (_ref2) {
        var dependencies = _ref2.dependencies;
        var devDependencies = _ref2.devDependencies;
        return exit(opt.argv.json || dependencies.length === 0 && devDependencies.length === 0 ? 0 : -1);
      });
    })();
  }
}
module.exports = exports['default'];