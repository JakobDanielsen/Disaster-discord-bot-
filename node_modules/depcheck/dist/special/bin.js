'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _jsYaml = require('js-yaml');

var _jsYaml2 = _interopRequireDefault(_jsYaml);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

var travisCommands = [
// Reference: http://docs.travis-ci.com/user/customizing-the-build/#The-Build-Lifecycle
'before_install', 'install', 'before_script', 'script', 'after_success or after_failure', 'before_deploy', 'deploy', 'after_deploy', 'after_script'];

function concat(array, item) {
  return array.concat(item);
}

function getObjectValues(object) {
  return Object.keys(object).map(function (key) {
    return object[key];
  });
}

function toKeyValuePair(object) {
  return Object.keys(object).map(function (key) {
    return { key: key, value: object[key] };
  });
}

function loadMetadata(dep, dir) {
  try {
    var packagePath = _path2.default.resolve(dir, 'node_modules', dep, 'package.json');
    return require(packagePath);
  } catch (error) {
    return {}; // ignore silently
  }
}

function toMetadata(dep, dir) {
  var metadata = loadMetadata(dep, dir);
  var binaryLookup = metadata.bin || {};
  var binaries = toKeyValuePair(binaryLookup);

  return { dep: dep, binaries: binaries };
}

function getBinFeatures(dep, bin) {
  var binPath = _path2.default.join('node_modules', dep, bin.value).replace(/\\/g, '/');

  var features = [bin.key, '$(npm bin)/' + bin.key, 'node_modules/.bin/' + bin.key, './node_modules/.bin/' + bin.key, binPath, './' + binPath];

  return features;
}

function isUsedBin(dep, bin, scripts) {
  var features = getBinFeatures(dep, bin);
  return scripts.some(function (script) {
    return features.some(function (char) {
      return (' ' + script + ' ').indexOf(' ' + char + ' ') !== -1;
    });
  });
}

function getUsedDeps(deps, scripts, dir) {
  return deps.map(function (dep) {
    return toMetadata(dep, dir);
  }).filter(function (metadata) {
    return metadata.binaries.some(function (bin) {
      return isUsedBin(metadata.dep, bin, scripts);
    });
  }).map(function (metadata) {
    return metadata.dep;
  });
}

exports.default = function (content, filename, deps, dir) {
  var basename = _path2.default.basename(filename);
  if (basename === 'package.json') {
    var scripts = getObjectValues(JSON.parse(content).scripts || {});
    return getUsedDeps(deps, scripts, dir);
  } else if (basename === '.travis.yml') {
    var _ret = (function () {
      var metadata = _jsYaml2.default.safeLoad(content) || {};
      var scripts = travisCommands.map(function (cmd) {
        return metadata[cmd] || [];
      }).reduce(concat, []);
      return {
        v: getUsedDeps(deps, scripts, dir)
      };
    })();

    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
  }

  return [];
};

module.exports = exports['default'];