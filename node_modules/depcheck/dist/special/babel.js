'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(content) {
  try {
    return JSON.parse(content);
  } catch (error) {
    return {}; // ignore parse error silently
  }
}

function values(object) {
  return Object.keys(object || {}).map(function (key) {
    return object[key];
  });
}

function contain(array, dep, prefix) {
  if (!array) {
    return false;
  }

  // extract name if wrapping with options
  var names = array.map(function (item) {
    return typeof item === 'string' ? item : item[0];
  });
  if (names.indexOf(dep) !== -1) {
    return true;
  }

  if (prefix && dep.indexOf(prefix) === 0) {
    return contain(array, dep.substring(prefix.length), false);
  }

  return false;
}

function filter(deps, options) {
  var presets = deps.filter(function (dep) {
    return contain(options.presets, dep, 'babel-preset-');
  });

  var plugins = deps.filter(function (dep) {
    return contain(options.plugins, dep, 'babel-plugin-');
  });

  return presets.concat(plugins);
}

function checkOptions(deps) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var optDeps = filter(deps, options);
  var envDeps = values(options.env).map(function (env) {
    return filter(deps, env);
  }).reduce(function (array, item) {
    return array.concat(item);
  }, []);

  return optDeps.concat(envDeps);
}

exports.default = function (content, filePath, deps) {
  var filename = _path2.default.basename(filePath);

  if (filename === '.babelrc') {
    var options = parse(content);
    return checkOptions(deps, options);
  }

  if (filename === 'package.json') {
    var metadata = parse(content);
    return checkOptions(deps, metadata.babel);
  }

  return [];
};

module.exports = exports['default'];